% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gurobi.R
\name{gurobi_feasrelax}
\alias{gurobi_feasrelax}
\title{Compute a feasibility relaxation}
\usage{
gurobi_feasrelax(
  model,
  relaxobjtype,
  minrelax,
  penalties,
  params = NULL,
  env = NULL
)
}
\arguments{
\item{model}{The model list must contain a valid Gurobi model. See
\code{\link{gurobi_model}} for more information.}

\item{relaxobjtype}{The approach used to impose penalties on violations. If
you specify \code{relaxobjtype=0}, the objective for the feasibility
relaxation is to minimize the sum of the weighted magnitudes of the bound
and constraint violations. If you specify \code{relaxobjtype=1}, the
objective for the feasibility relaxation is to minimize the weighted sum of
the squares of the bound and constraint violations. If you specify
\code{relaxobjtype=2}, the objective for the feasibility relaxation is to
minimize the weighted count of bound and constraint violations. In all
cases, the weights are taken from \code{penalties$lb}, \code{penalties$ub}
and \code{penalties$rhs}. You can provide the special penalty value
\code{Inf} to indicate that the corresponding bound or constraint cannot be
relaxed.}

\item{minrelax}{The \code{minrelax} argument is a boolean that controls the
type of feasibility relaxation that is created.  If \code{minrelax=False},
optimizing the returned model gives a solution that minimizes the cost of
the violation.  If \code{minrelax=True}, optimizing the returned model finds
a solution that minimizes the original objective, but only from among those
solutions that minimize the cost of the violation.  Note that
\code{gurobi_feasrelax} must solve an optimization problem to find the
minimum possible relaxation when \code{minrelax=True}, which can be quite
expensive.}

\item{penalties}{The \code{penalties} argument is a A list of lists, having
the following optional named components (default: all \code{Inf}): \code{lb}
Penalty for violating each lower bound.  \code{ub} Penalty for violating
each upper bound.  \code{rhs} Penalty for violating each constraint.

To give an example, if a constraint with \code{penalties.rhs} value \code{p}
is violated by 2.0, it would contribute \code{2*p} to the feasibility
relaxation objective for \code{relaxobjtype=0}, \code{2*2*p} for
\code{relaxobjtype=1}, and \code{p} for \code{relaxobjtype=2}.}

\item{env}{The env list, when provided, allows you to use Gurobi Compute
Server or Gurobi Instant Cloud. See \code{\link{gurobi_env}} for more
information.}
}
\value{
A \code{list} containing two named components: \code{result$model},
a list variable, as described in the c("\\code{\\link{#3}}", "model",
"r:model", "gurobi_model")\code{\link{gurobi_model}} argument section.
\code{result$feasobj}, a scalar. If \code{minrelax==true} this is the
relaxation problem objective value, 0.0 otherwise.
}
\description{
This function computes a feasibility relaxation for the input \code{model}
argument.  The feasibility relaxation is a model that, when solved,
minimizes the amount by which the solution violates the bounds and linear
constraints of the original model.  You must provide a penalty to associate
with relaxing each individual bound or constraint (through the
\code{penalties} argument).  These penalties are interpreted in different
ways, depending on the value of the \code{relaxobjtype} argument.
}
\examples{
\%
penalties  <- list()
model  <-  gurobi_read('stein9.mps')
penalties$lb <-  c("rep(1,#1)", "length(model$lb)")rep(1,length(model$lb))
penalties$ub <-  c("rep(1,#1)", "length(model$ub)")rep(1,length(model$ub))
penalties$rhs <-  c("rep(1,#1)", "length(model$rhs)")rep(1,length(model$rhs))
feasrelaxresult  <-  gurobi_feasrelax(model, 0, False, penalties)

}
\references{
Gurobi Optimization (\url{http://www.gurobi.com}).

Gurobi Optimizer Reference Manual
(\url{http://www.gurobi.com/documentation/9.0/refman/index.html}).
}
\seealso{
The \code{\link{gurobi_package}} documentation contains general
information on the Gurobi R interface. The \code{\link{gurobi_problem}}
documentation has a detailed description of the types of models that gurobi
is able to optimize. The \code{\link{gurobi_usage}} documentation has an
overview on the usage of the Gurobi package.

For a detailed description of variables used as input and output of gurobi
functions see \code{\link{gurobi_model}}, \code{\link{gurobi_params}} and
\code{\link{gurobi_env}}.

The functions provided by the Gurobi package are: \code{\link{gurobi}},
\code{\link{gurobi_iis}}, \code{\link{gurobi_feasrelax}},
\code{\link{gurobi_relax}}, \code{\link{gurobi_read}} and
\code{\link{gurobi_write}}.
}
\author{
Gurobi Optimization
}
\keyword{optimize}
